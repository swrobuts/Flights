{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/gist/swrobuts/9a2095670bd8895f681961eb8ab5aa9b/flights.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ScGxjwH93yfo"
      },
      "source": [
        "<font size = 6.9em font weight = bold color = \"darkorange\" text-align = left>\n",
        "    <b>Verarbeiten grÃ¶ÃŸerer DatenbestÃ¤nde mit DuckDB ðŸ¦†</font>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qC-jRaq33yfs"
      },
      "source": [
        "### **Installation von DuckDB und Verbindung zu DuckDB (hier in-Memory-Verarbeitung)**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "29V8n1IE3yft"
      },
      "outputs": [],
      "source": [
        "%%capture\n",
        "!pip install duckdb"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J7ZRRZYn3yfu"
      },
      "outputs": [],
      "source": [
        "import duckdb\n",
        "\n",
        "# Verbindung zur in-memory DuckDB-Datenbank (':memory:') herstellen; Voraussetzung: DuckDB muss installiert sein, ':memory:' muss als Vorgabe so gesetzt sein\n",
        "conn = duckdb.connect(':memory:')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ma1GVHTB3yfu"
      },
      "source": [
        "### **Inspektion der Daten via SQL**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "763IWfGK3yfv",
        "outputId": "8ab5f838-25c7-484a-dd13-6a1c2e8a40d7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('IATA_CODE', 'VARCHAR', 'YES', None, None, None)\n",
            "('AIRPORT', 'VARCHAR', 'YES', None, None, None)\n",
            "('CITY', 'VARCHAR', 'YES', None, None, None)\n",
            "('STATE', 'VARCHAR', 'YES', None, None, None)\n",
            "('COUNTRY', 'VARCHAR', 'YES', None, None, None)\n",
            "('LATITUDE', 'DOUBLE', 'YES', None, None, None)\n",
            "('LONGITUDE', 'DOUBLE', 'YES', None, None, None)\n"
          ]
        }
      ],
      "source": [
        "# Inspektion der Daten und Test der Verbindung zur Datenquelle, die Ã¼ber die untere URL zu erreichen ist\n",
        "result = conn.execute(\"\"\"\n",
        "DESCRIBE SELECT * FROM 'https://media.githubusercontent.com/media/swrobuts/Flights/main/airports.csv';\n",
        "\"\"\").fetchall()\n",
        "\n",
        "# Ausgabe des Ergebnisses\n",
        "for row in result:\n",
        "    print(row)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cKhNWO6K3yfw"
      },
      "source": [
        "### **Aufbau und BefÃ¼llen der Tabelle `airports`**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "RBRDZdlT3yfx",
        "outputId": "696518c7-ae59-4b32-fd4f-6fa99fb8ebc3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   airport_id iata_code                                            airport  \\\n",
              "0           0       ITO                         Hilo International Airport   \n",
              "1           1       JAC                               Jackson Hole Airport   \n",
              "2           2       JAX                 Jacksonville International Airport   \n",
              "3           3       JFK  John F. Kennedy International AirportÂ (New Yor...   \n",
              "4           4       KOA              Kona International Airport at Keahole   \n",
              "\n",
              "           city state country  latitude  longitude  \n",
              "0          Hilo    HI     USA  19.72026 -155.04847  \n",
              "1       Jackson    WY     USA  43.60732 -110.73774  \n",
              "2  Jacksonville    FL     USA  30.49406  -81.68786  \n",
              "3      New York    NY     USA  40.63975  -73.77893  \n",
              "4   Kailua/Kona    HI     USA  19.73877 -156.04563  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-791e7ca6-08e2-446b-8521-3da99d2070ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airport_id</th>\n",
              "      <th>iata_code</th>\n",
              "      <th>airport</th>\n",
              "      <th>city</th>\n",
              "      <th>state</th>\n",
              "      <th>country</th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>ITO</td>\n",
              "      <td>Hilo International Airport</td>\n",
              "      <td>Hilo</td>\n",
              "      <td>HI</td>\n",
              "      <td>USA</td>\n",
              "      <td>19.72026</td>\n",
              "      <td>-155.04847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>JAC</td>\n",
              "      <td>Jackson Hole Airport</td>\n",
              "      <td>Jackson</td>\n",
              "      <td>WY</td>\n",
              "      <td>USA</td>\n",
              "      <td>43.60732</td>\n",
              "      <td>-110.73774</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>JAX</td>\n",
              "      <td>Jacksonville International Airport</td>\n",
              "      <td>Jacksonville</td>\n",
              "      <td>FL</td>\n",
              "      <td>USA</td>\n",
              "      <td>30.49406</td>\n",
              "      <td>-81.68786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>JFK</td>\n",
              "      <td>John F. Kennedy International AirportÂ (New Yor...</td>\n",
              "      <td>New York</td>\n",
              "      <td>NY</td>\n",
              "      <td>USA</td>\n",
              "      <td>40.63975</td>\n",
              "      <td>-73.77893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>KOA</td>\n",
              "      <td>Kona International Airport at Keahole</td>\n",
              "      <td>Kailua/Kona</td>\n",
              "      <td>HI</td>\n",
              "      <td>USA</td>\n",
              "      <td>19.73877</td>\n",
              "      <td>-156.04563</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-791e7ca6-08e2-446b-8521-3da99d2070ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-791e7ca6-08e2-446b-8521-3da99d2070ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-791e7ca6-08e2-446b-8521-3da99d2070ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-beb3fd0e-4f84-4d74-8019-c99682be37a8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-beb3fd0e-4f84-4d74-8019-c99682be37a8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-beb3fd0e-4f84-4d74-8019-c99682be37a8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "airports_df",
              "summary": "{\n  \"name\": \"airports_df\",\n  \"rows\": 322,\n  \"fields\": [\n    {\n      \"column\": \"airport_id\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 322,\n        \"samples\": [\n          173,\n          132,\n          197\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iata_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 322,\n        \"samples\": [\n          \"ISN\",\n          \"DAB\",\n          \"MMH\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airport\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 322,\n        \"samples\": [\n          \"Sloulin Field International Airport\",\n          \"Daytona Beach International Airport\",\n          \"Mammoth Yosemite Airport\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 308,\n        \"samples\": [\n          \"Gillette\",\n          \"Long Beach\",\n          \"Ft. Myers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 54,\n        \"samples\": [\n          \"MT\",\n          \"NH\",\n          \"TN\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"USA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.616735581018046,\n        \"min\": 13.48345,\n        \"max\": 71.28545,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          40.78839\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.5234920464981,\n        \"min\": -176.64603,\n        \"max\": -64.79856,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          -111.97777\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Verbindung zur in-memory DuckDB-Datenbank herstellen; Voraussetzung: DuckDB muss installiert sein\n",
        "conn = duckdb.connect(':memory:')\n",
        "\n",
        "# Sequenz und Tabelle \"airports\" erstellen\n",
        "conn.execute(\"\"\"\n",
        "CREATE SEQUENCE IF NOT EXISTS airport_id\n",
        "INCREMENT BY 1 MINVALUE 0;\n",
        "\"\"\")\n",
        "\n",
        "conn.execute(\"\"\"\n",
        "CREATE TABLE IF NOT EXISTS airports (\n",
        "    airport_id INTEGER PRIMARY KEY DEFAULT(nextval('airport_id')),\n",
        "    iata_code VARCHAR(5),\n",
        "    airport VARCHAR(255),\n",
        "    city VARCHAR(255),\n",
        "    state VARCHAR(255),\n",
        "    country VARCHAR(255),\n",
        "    latitude DOUBLE,\n",
        "    longitude DOUBLE,\n",
        "    CONSTRAINT airport_id UNIQUE (airport_id)\n",
        ");\n",
        "\"\"\")\n",
        "\n",
        "# BefÃ¼llen der angelegten Tabelle bzw. Relation \"airports\" aus der csv-Datei\n",
        "conn.execute(\"\"\"\n",
        "INSERT INTO airports(\"iata_code\", \"airport\",\"city\",\"state\",\"country\",\"latitude\",\"longitude\")\n",
        "SELECT DISTINCT \"IATA_CODE\", \"AIRPORT\", \"CITY\", \"STATE\",\"COUNTRY\",\"LATITUDE\",\"LONGITUDE\"\n",
        "FROM 'https://media.githubusercontent.com/media/swrobuts/Flights/main/airports.csv';\n",
        "\"\"\")\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der Relation \"airports\" in ein pandas DataFrame\n",
        "airports_df = conn.execute(\"SELECT * FROM airports;\").df()\n",
        "\n",
        "# Einige Daten aus der Tabelle \"airports\" abfragen, um zu testen\n",
        "airports_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tUJm28Al3yfx"
      },
      "source": [
        "### **Aufbau und BefÃ¼llen der Tabelle `airlines`**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IWUr-tJh3yfx",
        "outputId": "ed98f8bb-56b5-44b2-c448-187af8a8bb83",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   airline_id iata_code                 airline\n",
              "0         100        AA  American Airlines Inc.\n",
              "1         101        F9  Frontier Airlines Inc.\n",
              "2         102        OO   Skywest Airlines Inc.\n",
              "3         103        HA  Hawaiian Airlines Inc.\n",
              "4         104        UA   United Air Lines Inc."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aebf0871-4bf0-49bd-ae8a-7a973d2ab0e3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline_id</th>\n",
              "      <th>iata_code</th>\n",
              "      <th>airline</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>100</td>\n",
              "      <td>AA</td>\n",
              "      <td>American Airlines Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>101</td>\n",
              "      <td>F9</td>\n",
              "      <td>Frontier Airlines Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>102</td>\n",
              "      <td>OO</td>\n",
              "      <td>Skywest Airlines Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>103</td>\n",
              "      <td>HA</td>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>104</td>\n",
              "      <td>UA</td>\n",
              "      <td>United Air Lines Inc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aebf0871-4bf0-49bd-ae8a-7a973d2ab0e3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aebf0871-4bf0-49bd-ae8a-7a973d2ab0e3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aebf0871-4bf0-49bd-ae8a-7a973d2ab0e3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-157b72f5-4db2-4bb7-a741-6ac5f32af3be\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-157b72f5-4db2-4bb7-a741-6ac5f32af3be')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-157b72f5-4db2-4bb7-a741-6ac5f32af3be button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "airlines_df",
              "summary": "{\n  \"name\": \"airlines_df\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"airline_id\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          109,\n          111,\n          100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iata_code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"WN\",\n          \"EV\",\n          \"AA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airline\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Southwest Airlines Co.\",\n          \"Atlantic Southeast Airlines\",\n          \"American Airlines Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "# Anlegen und BefÃ¼llen der Tabelle \"airlines\"\n",
        "conn.execute(\"\"\"\n",
        "CREATE SEQUENCE IF NOT EXISTS \"airline_id\"\n",
        "INCREMENT BY 1 MINVALUE 100;\n",
        "\n",
        "CREATE TABLE IF NOT EXISTS airlines\n",
        "(\n",
        "    \"airline_id\" INTEGER PRIMARY KEY DEFAULT(nextval('airline_id')),\n",
        "    \"iata_code\" VARCHAR(10),\n",
        "    \"airline\" VARCHAR(255),\n",
        "    CONSTRAINT \"airline_id\" UNIQUE (\"airline_id\")\n",
        "    );\n",
        "\n",
        "--- BefÃ¼llen der angelegten Tabelle \"airlines\"\n",
        "INSERT INTO airlines(\"iata_code\",\"airline\")\n",
        "SELECT DISTINCT \"IATA_CODE\", \"AIRLINE\"\n",
        "FROM read_csv('https://raw.githubusercontent.com/swrobuts/Flights/main/airlines.csv',\n",
        "              delim = ',',\n",
        "              header = true,\n",
        "              Columns = {\n",
        "              'IATA_CODE': 'VARCHAR(5)',\n",
        "              'AIRLINE': 'VARCHAR(255)'\n",
        "              })\n",
        "\"\"\")\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der Relation \"airlines\" in ein pandas DataFrame\n",
        "airlines_df = conn.execute(\"SELECT * FROM airlines;\").df()\n",
        "\n",
        "# Einige Daten aus der Tabelle \"airlines\" abfragen, um zu testen\n",
        "airlines_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CB4_JOo23yfy"
      },
      "source": [
        "### **Anlegen und BefÃ¼llen der Tabelle `cancellation_reasons`**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Tqj7phdl3yfy",
        "outputId": "2a11b118-cb9c-4a1d-e2b7-2f35faf7334e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   cr_id               reason shortcut\n",
              "0     90     Airline/ Carrier        A\n",
              "1     80              Weather        B\n",
              "2     70  National Air System        C\n",
              "3     60             Security        D\n",
              "4      0    Keine Stornierung       No"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-471f0984-efd5-4791-b8eb-6273f8e78e62\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cr_id</th>\n",
              "      <th>reason</th>\n",
              "      <th>shortcut</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>90</td>\n",
              "      <td>Airline/ Carrier</td>\n",
              "      <td>A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80</td>\n",
              "      <td>Weather</td>\n",
              "      <td>B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>70</td>\n",
              "      <td>National Air System</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>60</td>\n",
              "      <td>Security</td>\n",
              "      <td>D</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>Keine Stornierung</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-471f0984-efd5-4791-b8eb-6273f8e78e62')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-471f0984-efd5-4791-b8eb-6273f8e78e62 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-471f0984-efd5-4791-b8eb-6273f8e78e62');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ec2ef83c-880a-4cc3-841a-75c8d0c46ccf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec2ef83c-880a-4cc3-841a-75c8d0c46ccf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ec2ef83c-880a-4cc3-841a-75c8d0c46ccf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cancellation_reasons_df",
              "summary": "{\n  \"name\": \"cancellation_reasons_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"cr_id\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          80,\n          0,\n          70\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"reason\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Weather\",\n          \"Keine Stornierung\",\n          \"National Air System\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"shortcut\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"B\",\n          \"No\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "## Anlegen der Tabelle \"cancellation_reasons\"\n",
        "conn.execute(\"\"\"\n",
        "CREATE TABLE IF NOT EXISTS cancellation_reasons\n",
        "(\n",
        "    \"cr_id\" INTEGER PRIMARY KEY,\n",
        "    \"reason\" VARCHAR(255),\n",
        "    \"shortcut\" VARCHAR(5),\n",
        ");\n",
        "\n",
        "-- Manuelles BefÃ¼llen der Tabelle \"cancellations_reasons\", die IDs fÃ¼r den Primary Key sind willkÃ¼rlich, sie mÃ¼ssen aber unterschiedlich sein\n",
        "INSERT INTO cancellation_reasons\n",
        "VALUES\n",
        "(90, 'Airline/ Carrier', 'A'),\n",
        "(80,'Weather', 'B'),\n",
        "(70,'National Air System', 'C'),\n",
        "(60,'Security', 'D'),\n",
        "(0, 'Keine Stornierung', 'No');\n",
        "\"\"\")\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der angelegten Relation in ein pandas DataFrame\n",
        "cancellation_reasons_df = conn.execute(\"SELECT * FROM cancellation_reasons;\").df()\n",
        "\n",
        "# Testabfrage\n",
        "cancellation_reasons_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cAwe5-_M3yfy"
      },
      "source": [
        "### **Anlegen und BefÃ¼llen der Tabelle `flights`**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "FÃ¼r **Google Colab** wird das grÃ¶ÃŸere csv-File Ã¼ber Google Drive bereitgestellt, dafÃ¼r ist Google Drive zu mounten. Alternativ kann die Datei auch direkt bei Google Drive heruntergeladen werden: https://drive.google.com/uc?export=download&id=10GvGmcbdkghj0LCfkTePUUwjOfbTheeP\n"
      ],
      "metadata": {
        "id": "K0d8u0PHDEjo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Pfad zur CSV-Datei\n",
        "file_path = '/content/drive/My Drive/flights.csv'\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oWFtJgqYDDlV",
        "outputId": "ef7f4791-dec0-412b-af8c-a9ace931ea25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3j2isB-G3yfz",
        "outputId": "a55bd841-ca50-4c06-de33-06f58f6ccc21",
        "colab": {
          "referenced_widgets": [
            "d35e7ca264d248e09d08a7c52f1414da",
            "03ac2e0149564f83bde239a4ae730807",
            "fd95791c9a6941db8b477a9c707d2909"
          ],
          "base_uri": "https://localhost:8080/",
          "height": 66
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d35e7ca264d248e09d08a7c52f1414da"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<duckdb.duckdb.DuckDBPyConnection at 0x7cb9f207db70>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "# Anlegen der Tabelle \"flights\"\n",
        "conn.execute(\"\"\"\n",
        "CREATE SEQUENCE IF NOT EXISTS \"flight_id\"\n",
        "INCREMENT BY 1 MINVALUE 0;\n",
        "\n",
        "CREATE TABLE IF NOT EXISTS flights\n",
        "(   \"flight_id\" INTEGER PRIMARY KEY DEFAULT(nextval('flight_id')),\n",
        "    \"year\" INTEGER,\n",
        "    \"month\" INTEGER,\n",
        "    \"day\" INTEGER,\n",
        "    \"day_of_week\" INTEGER,\n",
        "    \"airline\" VARCHAR(10),\n",
        "    \"flight_number\" VARCHAR(255),\n",
        "    \"tail_number\" VARCHAR(255),\n",
        "    \"origin_airport\" VARCHAR(10),\n",
        "    \"destination_airport\" VARCHAR(10),\n",
        "    \"scheduled_departure\" VARCHAR(255),\n",
        "    \"departure_time\" VARCHAR(255),\n",
        "    \"departure_delay\" INTEGER,\n",
        "    \"taxi_out\" INTEGER,\n",
        "    \"wheels_off\" VARCHAR(255),\n",
        "    \"scheduled_time\" INTEGER,\n",
        "    \"elapsed_time\" INTEGER,\n",
        "    \"air_time\" INTEGER,\n",
        "    \"distance\" INTEGER,\n",
        "    \"wheels_on\" VARCHAR(255),\n",
        "    \"taxi_in\" INTEGER,\n",
        "    \"scheduled_arrival\" VARCHAR(255),\n",
        "    \"arrival_time\" VARCHAR(255),\n",
        "    \"arrival_delay\" INTEGER,\n",
        "    \"diverted\" INTEGER,\n",
        "    \"cancelled\" INTEGER,\n",
        "    \"cancellation_reason\" VARCHAR(255),\n",
        "    \"air_system_delay\" INTEGER,\n",
        "    \"security_delay\" INTEGER,\n",
        "    \"airline_delay\" INTEGER,\n",
        "    \"late_aircraft_delay\" INTEGER,\n",
        "    \"weather_delay\" INTEGER,\n",
        "    CONSTRAINT \"flight_id\" UNIQUE (\"flight_id\")\n",
        ");\n",
        "\"\"\")\n",
        "\n",
        "# BefÃ¼llen der Tabelle aus \"flights.csv\". Die Daten werden nicht direkt Ã¼ber http aus Performance-GrÃ¼nden, sondern Ã¼ber Google Drive geladen\n",
        "# Alterbative kÃ¶nnen Sie auch direkt die csv-Datei herunterladen und dann per Dateipfad einlesen\n",
        "conn.execute(\"\"\"\n",
        "INSERT INTO flights\n",
        "(\n",
        "\"year\",\n",
        "\"month\",\n",
        "\"day\",\n",
        "\"day_of_week\",\n",
        "\"airline\",\n",
        "\"flight_number\",\n",
        "\"tail_number\",\n",
        "\"origin_airport\",\n",
        "\"destination_airport\",\n",
        "\"scheduled_departure\",\n",
        "\"departure_time\",\n",
        "\"departure_delay\",\n",
        "\"taxi_out\",\n",
        "\"wheels_off\",\n",
        "\"scheduled_time\",\n",
        "\"elapsed_time\",\n",
        "\"air_time\",\n",
        "\"distance\",\n",
        "\"wheels_on\",\n",
        "\"taxi_in\",\n",
        "\"scheduled_arrival\",\n",
        "\"arrival_time\",\n",
        "\"arrival_delay\",\n",
        "\"diverted\",\n",
        "\"cancelled\",\n",
        "\"cancellation_reason\",\n",
        "\"air_system_delay\",\n",
        "\"security_delay\",\n",
        "\"airline_delay\",\n",
        "\"late_aircraft_delay\",\n",
        "\"weather_delay\"\n",
        ")\n",
        "SELECT\n",
        "\"YEAR\",\n",
        "\"MONTH\",\n",
        "\"DAY\",\n",
        "\"DAY_OF_WEEK\",\n",
        "\"AIRLINE\",\n",
        "\"FLIGHT_NUMBER\",\n",
        "\"TAIL_NUMBER\",\n",
        "\"ORIGIN_AIRPORT\",\n",
        "\"DESTINATION_AIRPORT\",\n",
        "\"SCHEDULED_DEPARTURE\",\n",
        "\"DEPARTURE_TIME\",\n",
        "\"DEPARTURE_DELAY\",\n",
        "\"TAXI_OUT\",\n",
        "\"WHEELS_OFF\",\n",
        "\"SCHEDULED_TIME\",\n",
        "\"ELAPSED_TIME\",\n",
        "\"AIR_TIME\",\n",
        "\"DISTANCE\",\n",
        "\"WHEELS_ON\",\n",
        "\"TAXI_IN\",\n",
        "\"SCHEDULED_ARRIVAL\",\n",
        "\"ARRIVAL_TIME\",\n",
        "\"ARRIVAL_DELAY\",\n",
        "\"DIVERTED\",\n",
        "\"CANCELLED\",\n",
        "\"CANCELLATION_REASON\",\n",
        "\"AIR_SYSTEM_DELAY\",\n",
        "\"SECURITY_DELAY\",\n",
        "\"AIRLINE_DELAY\",\n",
        "\"LATE_AIRCRAFT_DELAY\",\n",
        "\"WEATHER_DELAY\"\n",
        "FROM read_csv_auto('/content/drive/My Drive/flights.csv');\n",
        "\"\"\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pY8USy7M3yfz"
      },
      "source": [
        "### **Anlegen und BefÃ¼llen der Tabelle `time`**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yfWEzfGW3yfz",
        "outputId": "15972c38-174b-4910-80c9-674e0740d61a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 66,
          "referenced_widgets": [
            "8c99e4461f1749f6b8200a76ab8e3fb7",
            "9678eba244da484d940d981ad116d1ed",
            "39f43a93711948c282e36ff1cd3099bf"
          ]
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8c99e4461f1749f6b8200a76ab8e3fb7"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<duckdb.duckdb.DuckDBPyConnection at 0x7cb9f207db70>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "# \"date\"\" als eigene Spalte in \"flights\" anlegen und BefÃ¼llen der Spalte \"date\" mit einem qualifizierten Datum in Notation \"YYYY-MM-DD\"\n",
        "conn.execute(\"\"\"\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"date\" DATE;\n",
        "\n",
        "UPDATE flights\n",
        "SET date = MAKE_DATE(\"year\", \"month\", \"day\");\n",
        "\"\"\")\n",
        "\n",
        "# Anlegen der Tabelle \"time\" als eigenstÃ¤ndige Zeit-Dimension\n",
        "conn.execute(\"\"\"\n",
        "    CREATE TABLE IF NOT EXISTS \"time\" (\n",
        "    \"date\" DATE,\n",
        "    \"year\" INTEGER,\n",
        "    \"month\" INTEGER,\n",
        "    \"quarter\" INTEGER,\n",
        "    \"week\" INTEGER,\n",
        "    \"weekday\" INTEGER,\n",
        "    \"weekday_name\" VARCHAR(255),\n",
        "    \"quarter_name\" VARCHAR(255),\n",
        "    \"month_name\" VARCHAR(255),\n",
        "    \"week_name\" VARCHAR(255)\n",
        ");\n",
        "\n",
        "-- BefÃ¼llen der Tabelle aus der Spalte date\n",
        "INSERT INTO time (\"date\", \"year\", \"month\", \"quarter\", \"week\", \"weekday\", \"weekday_name\", \"quarter_name\", \"month_name\", \"week_name\")\n",
        "SELECT\n",
        "    DISTINCT \"date\",\n",
        "    EXTRACT(YEAR FROM \"date\") AS \"year\",\n",
        "    EXTRACT(MONTH FROM \"date\") AS \"month\",\n",
        "    EXTRACT(QUARTER FROM \"date\") AS \"quarter\",\n",
        "    EXTRACT(WEEK FROM \"date\") AS \"week\",\n",
        "    EXTRACT(DOW FROM \"date\") AS \"weekday\",\n",
        "    -- Berechne den abgekÃ¼rzten Wochentagnamen\n",
        "    CASE\n",
        "        WHEN EXTRACT(DOW FROM \"date\") = 0 THEN 'Sun'\n",
        "        WHEN EXTRACT(DOW FROM \"date\") = 1 THEN 'Mon'\n",
        "        WHEN EXTRACT(DOW FROM \"date\") = 2 THEN 'Tue'\n",
        "        WHEN EXTRACT(DOW FROM \"date\") = 3 THEN 'Wed'\n",
        "        WHEN EXTRACT(DOW FROM \"date\") = 4 THEN 'Thu'\n",
        "        WHEN EXTRACT(DOW FROM \"date\") = 5 THEN 'Fri'\n",
        "        WHEN EXTRACT(DOW FROM \"date\") = 6 THEN 'Sat'\n",
        "    END AS weekday_name,\n",
        "    -- Formatierung fÃ¼r Quartal\n",
        "    'Q' || EXTRACT(QUARTER FROM \"date\") || ' ' || EXTRACT(YEAR FROM \"date\") AS \"quarter_name\",\n",
        "    -- Formatierung fÃ¼r Monat\n",
        "    CASE EXTRACT(MONTH FROM \"date\")\n",
        "        WHEN 1 THEN 'Jan'\n",
        "        WHEN 2 THEN 'Feb'\n",
        "        WHEN 3 THEN 'Mar'\n",
        "        WHEN 4 THEN 'Apr'\n",
        "        WHEN 5 THEN 'May'\n",
        "        WHEN 6 THEN 'Jun'\n",
        "        WHEN 7 THEN 'Jul'\n",
        "        WHEN 8 THEN 'Aug'\n",
        "        WHEN 9 THEN 'Sep'\n",
        "        WHEN 10 THEN 'Oct'\n",
        "        WHEN 11 THEN 'Nov'\n",
        "        WHEN 12 THEN 'Dec'\n",
        "    END || ' ' || EXTRACT(YEAR FROM \"date\") AS \"month_name\",\n",
        "    -- Formatierung fÃ¼r Kalenderwoche\n",
        "    'W' || EXTRACT(WEEK FROM \"date\") || ' ' || EXTRACT(YEAR FROM \"date\") AS \"week_name\"\n",
        "FROM flights\n",
        "ORDER BY \"date\";\n",
        "\"\"\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TH0oLQ_G3yf0"
      },
      "source": [
        "### **Data Preparation**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5h4pOTBK3yf0",
        "outputId": "81026546-50ad-4f8a-f45e-fa14fa283861",
        "colab": {
          "referenced_widgets": [
            "573d4fd262df46b286e9e5b7419ae2e5",
            "899ecc2e41bb493a96b2642f191c2f35",
            "a9803f936db9407ebfac1eca4827c90a",
            "1666637be781416083a229b451726328",
            "5f739bfcf3a54ad3812328c82904f344",
            "c8ead106458144c7ab38a919105e58bb",
            "a7b5b16af5ac4abd9302aa8ba44a2fcd",
            "ad2d23973f3240e0aea84598270d5723",
            "fbda111083e94f95b5b03f535d5f8afb"
          ],
          "base_uri": "https://localhost:8080/",
          "height": 126
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "573d4fd262df46b286e9e5b7419ae2e5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1666637be781416083a229b451726328"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a7b5b16af5ac4abd9302aa8ba44a2fcd"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<duckdb.duckdb.DuckDBPyConnection at 0x7cb9f207db70>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "# Umformen der Werte wie \"0054\" in \"00:54:00\" und CAST in Datentype \"TIME\"\n",
        "conn.execute(\"\"\"\n",
        "UPDATE flights\n",
        "SET\n",
        "    \"scheduled_departure\" = CASE\n",
        "        WHEN \"scheduled_departure\" IS NULL OR \"scheduled_departure\" = '' THEN NULL\n",
        "        ELSE TRY_CAST(CONCAT(SUBSTRING(\"scheduled_departure\", 1, 2), ':', SUBSTRING(\"scheduled_departure\", 3, 2), ':00') AS TIME)\n",
        "    END,\n",
        "    \"departure_time\" = CASE\n",
        "        WHEN \"departure_time\" IS NULL OR \"departure_time\" = '' THEN NULL\n",
        "        ELSE TRY_CAST(CONCAT(SUBSTRING(\"departure_time\", 1, 2), ':', SUBSTRING(\"departure_time\", 3, 2), ':00') AS TIME)\n",
        "    END,\n",
        "    \"wheels_off\" = CASE\n",
        "        WHEN \"wheels_off\" IS NULL OR \"wheels_off\" = '' THEN NULL\n",
        "        ELSE TRY_CAST(CONCAT(SUBSTRING(\"wheels_off\", 1, 2), ':', SUBSTRING(\"wheels_off\", 3, 2), ':00') AS TIME)\n",
        "    END,\n",
        "    \"wheels_on\" = CASE\n",
        "        WHEN \"wheels_on\" IS NULL OR \"wheels_on\" = '' THEN NULL\n",
        "        ELSE TRY_CAST(CONCAT(SUBSTRING(\"wheels_on\", 1, 2), ':', SUBSTRING(\"wheels_on\", 3, 2), ':00') AS TIME)\n",
        "    END,\n",
        "    \"scheduled_arrival\" = CASE\n",
        "        WHEN \"scheduled_arrival\" IS NULL OR \"scheduled_arrival\" = '' THEN NULL\n",
        "        ELSE TRY_CAST(CONCAT(SUBSTRING(\"scheduled_arrival\", 1, 2), ':', SUBSTRING(\"scheduled_arrival\", 3, 2), ':00') AS TIME)\n",
        "    END,\n",
        "    \"arrival_time\" = CASE\n",
        "        WHEN \"arrival_time\" IS NULL OR \"arrival_time\" = '' THEN NULL\n",
        "        ELSE TRY_CAST(CONCAT(SUBSTRING(\"arrival_time\", 1, 2), ':', SUBSTRING(\"arrival_time\", 3, 2), ':00') AS TIME)\n",
        "    END\n",
        "WHERE \"scheduled_departure\" IS NOT NULL OR \"departure_time\" IS NOT NULL OR \"wheels_off\" IS NOT NULL OR \"wheels_on\" IS NOT NULL OR \"scheduled_arrival\" IS NOT NULL OR \"arrival_time\" IS NOT NULL;\n",
        "\"\"\")\n",
        "\n",
        "# Weitere Spalten in \"flights\" anlegen\n",
        "conn.execute(\"\"\"\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"weekday_name\" VARCHAR(255);\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"quarter_name\" VARCHAR(255);\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"month_name\" VARCHAR(255);\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"week_name\" VARCHAR(255);\n",
        "\"\"\")\n",
        "\n",
        "# Aktualisieren der Spalten in \"flights\"\n",
        "conn.execute(\"\"\"\n",
        "UPDATE flights\n",
        "SET \"weekday_name\" = t.\"weekday_name\"\n",
        "FROM \"time\" t\n",
        "WHERE t.\"date\" = flights.\"date\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"week_name\" = t.\"week_name\"\n",
        "FROM \"time\" t\n",
        "WHERE t.\"date\" = flights.\"date\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"month_name\" = t.\"month_name\"\n",
        "FROM \"time\" t\n",
        "WHERE t.\"date\" = flights.\"date\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"quarter_name\" = t.\"quarter_name\"\n",
        "FROM \"time\" t\n",
        "WHERE t.\"date\" = flights.\"date\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"cancellation_reason\" = cr.\"reason\"\n",
        "FROM cancellation_reasons cr\n",
        "WHERE cr.\"shortcut\" = flights.\"cancellation_reason\";\n",
        "\"\"\")\n",
        "\n",
        "# EinfÃ¼gen weiterer Spalten in \"flights\"\n",
        "conn.execute(\"\"\"\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"origin_airport_lon\" DOUBLE;\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"origin_airport_lat\" DOUBLE;\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"destination_airport_lon\" DOUBLE;\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"destination_airport_lat\" DOUBLE;\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"origin_city\" VARCHAR(255);\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"destination_city\" VARCHAR(255);\n",
        "\n",
        "ALTER TABLE flights\n",
        "ADD COLUMN IF NOT EXISTS \"airline_name\" VARCHAR(255);\n",
        "\"\"\")\n",
        "\n",
        "# Aktualisieren der Spalten\n",
        "conn.execute(\"\"\"\n",
        "UPDATE flights\n",
        "SET \"origin_airport_lon\" = ap.\"longitude\"\n",
        "FROM airports ap\n",
        "WHERE ap.\"iata_code\" = flights.\"origin_airport\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"origin_airport_lat\" = ap.\"latitude\"\n",
        "FROM airports ap\n",
        "WHERE ap.\"iata_code\" = flights.\"origin_airport\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"destination_airport_lon\" = ap.\"longitude\"\n",
        "FROM airports ap\n",
        "WHERE ap.\"iata_code\" = flights.\"destination_airport\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"destination_airport_lat\" = ap.\"latitude\"\n",
        "FROM airports ap\n",
        "WHERE ap.\"iata_code\" = flights.\"destination_airport\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"destination_city\" = ap.\"city\"\n",
        "FROM airports ap\n",
        "WHERE ap.\"iata_code\" = flights.\"destination_airport\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"origin_city\" = ap.\"city\"\n",
        "FROM airports ap\n",
        "WHERE ap.\"iata_code\" = flights.\"origin_airport\";\n",
        "\n",
        "UPDATE flights\n",
        "SET \"airline_name\" = al.\"airline\"\n",
        "FROM airlines al\n",
        "WHERE al.\"iata_code\" = flights.\"airline\";\n",
        "\"\"\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bu52kxrK3yf0"
      },
      "source": [
        "### **Erstellen von DB-Views und ÃœberfÃ¼hren jeweils in ein `pandas DataFrame`**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U8PtKcRZ3yf1"
      },
      "source": [
        "**One Big Table**\n",
        "\n",
        "Eine \"One Big Table\" ist ein Datenmodellierungskonzept, bei dem eine einzelne, denormalisierte Tabelle verwendet wird, um eine Vielzahl von Attributen oder Merkmalen zu speichern, die fÃ¼r analytische Abfragen oder Berichterstattungszwecke relevant sind. Dieses Modell aggregiert Daten aus mehreren Tabellen oder Datenquellen in einer einzigen Tabelle, indem es Normalisierungsprinzipien aufgibt, um eine vereinfachte Sicht zu schaffen, die schnelle und effiziente Abfragen ermÃ¶glicht."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZZ2jJ_J43yf1",
        "outputId": "86a9ca65-602c-4995-9558-d556144fa14a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<duckdb.duckdb.DuckDBPyConnection at 0x7cb9f207db70>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "conn.execute(\"\"\"\n",
        "CREATE VIEW IF NOT EXISTS vw_OneBigTable AS\n",
        "SELECT\n",
        "    \"flight_id\",\n",
        "    \"year\",\n",
        "    \"date\",\n",
        "    \"weekday_name\",\n",
        "    \"quarter_name\",\n",
        "    \"month_name\",\n",
        "    \"week_name\",\n",
        "    \"airline\" AS \"iata_airline\",\n",
        "    \"airline_name\" AS \"airline\",\n",
        "    \"flight_number\",\n",
        "    \"tail_number\",\n",
        "    \"origin_airport\",\n",
        "    \"origin_city\",\n",
        "    \"origin_airport_lon\",\n",
        "    \"origin_airport_lat\",\n",
        "    \"destination_airport\",\n",
        "    \"destination_city\",\n",
        "    \"destination_airport_lon\",\n",
        "    \"destination_airport_lat\",\n",
        "    \"scheduled_departure\",\n",
        "    \"departure_time\",\n",
        "    \"departure_delay\",\n",
        "    \"taxi_out\",\n",
        "    \"wheels_off\",\n",
        "    \"scheduled_time\",\n",
        "    \"elapsed_time\",\n",
        "    \"air_time\",\n",
        "    \"distance\"*1.60934 AS \"distance_km\",\n",
        "    \"wheels_on\",\n",
        "    \"taxi_in\",\n",
        "    \"scheduled_arrival\",\n",
        "    \"arrival_time\",\n",
        "    \"arrival_delay\",\n",
        "    \"diverted\",\n",
        "    \"cancelled\",\n",
        "    \"cancellation_reason\",\n",
        "    \"air_system_delay\",\n",
        "    \"security_delay\",\n",
        "    \"airline_delay\",\n",
        "    \"late_aircraft_delay\",\n",
        "    \"weather_delay\"\n",
        "FROM flights;\n",
        "\"\"\")\n",
        "\n",
        "# Der auskommentierte Code wÃ¼rde die DuckDB-Sicht \"vw_OneBigTable\" in ein pandas DataFrame Ã¼berfÃ¼hren, aber im Prinzip ist dies nicht nÃ¶tig, da Ã¼ber DuckDB im Folgenden analytische Sichten vorbereitet wurden\n",
        "# aus Performance-Sicht ist der Ansatz, analytische Sichten vorzubereiten ohnehin besser, als laufend eine One Big Table abzufragen\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der angelegten Relation in ein pandas DataFrame\n",
        "#OBT_df = conn.execute(\"SELECT * FROM vw_OneBigTable;\").df()\n",
        "\n",
        "# Testabfrage\n",
        "#OBT_df.head()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "--FLEci-3yf1"
      },
      "source": [
        "**Nur die durchgefÃ¼hrten (\"cancelled = 0\") FlÃ¼ge als One Big Table. Diese dient als View fÃ¼r alle weiteren Analysen**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9BVeGyla3yf1",
        "outputId": "bb9e5c07-6833-4b10-effe-4476025c0c89",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<duckdb.duckdb.DuckDBPyConnection at 0x7cb9f207db70>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "conn.execute(\"\"\"\n",
        "CREATE VIEW IF NOT EXISTS vw_ABT AS\n",
        "SELECT * FROM vw_OneBigTable\n",
        "WHERE \"cancelled\" = 0;\n",
        "\"\"\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_hRb361z3yf1"
      },
      "source": [
        "**Analysen im Kontext \"airlines\"**\n",
        "\n",
        "Annahme VerspÃ¤tung: https://ansperformance.eu/definition/punctuality/#:~:text=The%20share%20of%20IFR%20flights,departure%20time%20(airline%20schedules)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-REFi0-I3yf1",
        "outputId": "38ac7fd3-11f2-4f57-8f0e-8562632fd168",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414,
          "referenced_widgets": [
            "cf9116484cf14f29ae0ad5a242d3a3c6",
            "3341ec0d70264a7689dfbda931341a43",
            "47f1a612861e47a9897ccf1ceb10acbc"
          ]
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "cf9116484cf14f29ae0ad5a242d3a3c6"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  airline iata_airline  average_arrival_delay  \\\n",
              "0    Alaska Airlines Inc.           AS              -0.976563   \n",
              "1    Delta Air Lines Inc.           DL               0.186754   \n",
              "2  Hawaiian Airlines Inc.           HA               2.023093   \n",
              "3  American Airlines Inc.           AA               3.451372   \n",
              "4         US Airways Inc.           US               3.706209   \n",
              "\n",
              "   median_arrival_delay  average_departure_delay  median_departure_delay  \\\n",
              "0                  -5.0                 1.785801                    -4.0   \n",
              "1                  -8.0                 7.369254                    -1.0   \n",
              "2                  -2.0                 0.485713                    -4.0   \n",
              "3                  -6.0                 8.900856                    -2.0   \n",
              "4                  -4.0                 6.141137                    -2.0   \n",
              "\n",
              "   total_flights   distance_km  punctuality_rate_percent  \\\n",
              "0         172521  3.324571e+08                      80.7   \n",
              "1         875881  1.203257e+09                      82.5   \n",
              "2          76272  7.764912e+07                      87.4   \n",
              "3         725984  1.216654e+09                      78.1   \n",
              "4         198715  2.914989e+08                      78.7   \n",
              "\n",
              "   cancellation_rate_percent  cancellations most_frequent_destination  \\\n",
              "0                        0.4          669.0                       SEA   \n",
              "1                        0.4         3824.0                       ATL   \n",
              "2                        0.2          171.0                       HNL   \n",
              "3                        1.5        10919.0                       DFW   \n",
              "4                        2.0         4067.0                       CLT   \n",
              "\n",
              "  most_frequent_origin  buffer_flight  \n",
              "0                  SEA           -2.5  \n",
              "1                  ATL           -7.2  \n",
              "2                  HNL            1.5  \n",
              "3                  DFW           -5.3  \n",
              "4                  CLT           -2.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b5f13d97-8b81-4a71-b929-bf83efb70ba6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline</th>\n",
              "      <th>iata_airline</th>\n",
              "      <th>average_arrival_delay</th>\n",
              "      <th>median_arrival_delay</th>\n",
              "      <th>average_departure_delay</th>\n",
              "      <th>median_departure_delay</th>\n",
              "      <th>total_flights</th>\n",
              "      <th>distance_km</th>\n",
              "      <th>punctuality_rate_percent</th>\n",
              "      <th>cancellation_rate_percent</th>\n",
              "      <th>cancellations</th>\n",
              "      <th>most_frequent_destination</th>\n",
              "      <th>most_frequent_origin</th>\n",
              "      <th>buffer_flight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alaska Airlines Inc.</td>\n",
              "      <td>AS</td>\n",
              "      <td>-0.976563</td>\n",
              "      <td>-5.0</td>\n",
              "      <td>1.785801</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>172521</td>\n",
              "      <td>3.324571e+08</td>\n",
              "      <td>80.7</td>\n",
              "      <td>0.4</td>\n",
              "      <td>669.0</td>\n",
              "      <td>SEA</td>\n",
              "      <td>SEA</td>\n",
              "      <td>-2.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Delta Air Lines Inc.</td>\n",
              "      <td>DL</td>\n",
              "      <td>0.186754</td>\n",
              "      <td>-8.0</td>\n",
              "      <td>7.369254</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>875881</td>\n",
              "      <td>1.203257e+09</td>\n",
              "      <td>82.5</td>\n",
              "      <td>0.4</td>\n",
              "      <td>3824.0</td>\n",
              "      <td>ATL</td>\n",
              "      <td>ATL</td>\n",
              "      <td>-7.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "      <td>HA</td>\n",
              "      <td>2.023093</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>0.485713</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>76272</td>\n",
              "      <td>7.764912e+07</td>\n",
              "      <td>87.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>171.0</td>\n",
              "      <td>HNL</td>\n",
              "      <td>HNL</td>\n",
              "      <td>1.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>American Airlines Inc.</td>\n",
              "      <td>AA</td>\n",
              "      <td>3.451372</td>\n",
              "      <td>-6.0</td>\n",
              "      <td>8.900856</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>725984</td>\n",
              "      <td>1.216654e+09</td>\n",
              "      <td>78.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>10919.0</td>\n",
              "      <td>DFW</td>\n",
              "      <td>DFW</td>\n",
              "      <td>-5.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>US Airways Inc.</td>\n",
              "      <td>US</td>\n",
              "      <td>3.706209</td>\n",
              "      <td>-4.0</td>\n",
              "      <td>6.141137</td>\n",
              "      <td>-2.0</td>\n",
              "      <td>198715</td>\n",
              "      <td>2.914989e+08</td>\n",
              "      <td>78.7</td>\n",
              "      <td>2.0</td>\n",
              "      <td>4067.0</td>\n",
              "      <td>CLT</td>\n",
              "      <td>CLT</td>\n",
              "      <td>-2.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5f13d97-8b81-4a71-b929-bf83efb70ba6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b5f13d97-8b81-4a71-b929-bf83efb70ba6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b5f13d97-8b81-4a71-b929-bf83efb70ba6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-33089a31-bb4b-4e39-9416-2bb64d1f500f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-33089a31-bb4b-4e39-9416-2bb64d1f500f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-33089a31-bb4b-4e39-9416-2bb64d1f500f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "airlines_df",
              "summary": "{\n  \"name\": \"airlines_df\",\n  \"rows\": 14,\n  \"fields\": [\n    {\n      \"column\": \"airline\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"American Eagle Airlines Inc.\",\n          \"JetBlue Airways\",\n          \"Alaska Airlines Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"iata_airline\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"MQ\",\n          \"B6\",\n          \"AS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_arrival_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.155880943193096,\n        \"min\": -0.9765630924118783,\n        \"max\": 14.471799501705833,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          6.457873460764516,\n          6.677860800940307,\n          -0.9765630924118783\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"median_arrival_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.14322341192107,\n        \"min\": -8.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -8.0,\n          -3.0,\n          -5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"average_departure_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.329601500049489,\n        \"min\": 0.48571315965790407,\n        \"max\": 15.944765880783688,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          10.125188203309524,\n          11.5143526744102,\n          1.7858007096736666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"median_departure_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4064216928154862,\n        \"min\": -4.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -4.0,\n          -1.0,\n          -3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_flights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 358001,\n        \"min\": 61903,\n        \"max\": 1261855,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          294632,\n          267048,\n          172521\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distance_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 479954958.1871993,\n        \"min\": 77649118.0,\n        \"max\": 1504202302.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          200246367.0,\n          456492119.0,\n          332457079.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"punctuality_rate_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.4297764712253604,\n        \"min\": 65.9,\n        \"max\": 87.4,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          68.8,\n          77.6,\n          80.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cancellation_rate_percent\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2430907952658667,\n        \"min\": 0.2,\n        \"max\": 5.1,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.9,\n          0.4,\n          1.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cancellations\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5911.089466529726,\n        \"min\": 171.0,\n        \"max\": 16043.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          15025.0,\n          4276.0,\n          669.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"most_frequent_destination\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"DEN\",\n          \"IAH\",\n          \"SEA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"most_frequent_origin\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"JFK\",\n          \"IAH\",\n          \"SEA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"buffer_flight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7708450728220835,\n        \"min\": -8.9,\n        \"max\": 1.5,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          -3.5,\n          -4.7,\n          -2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "conn.execute(\"\"\"\n",
        "CREATE VIEW IF NOT EXISTS vw_airlines_metrics AS\n",
        "SELECT\n",
        "    \"airline\",\n",
        "    \"iata_airline\",\n",
        "    AVG(\"arrival_delay\") AS \"average_arrival_delay\",\n",
        "    MEDIAN(\"arrival_delay\") AS \"median_arrival_delay\",\n",
        "    AVG(\"departure_delay\") AS \"average_departure_delay\",\n",
        "    MEDIAN(\"departure_delay\") AS \"median_departure_delay\",\n",
        "    COUNT(\"flight_id\") AS \"total_flights\",\n",
        "    ROUND(SUM(\"distance_km\"),0) AS distance_km,\n",
        "    ROUND((SUM(CASE\n",
        "        WHEN (\"arrival_delay\" >= 15 OR \"departure_delay\" >= 15 OR \"departure_delay\" <= -15) AND \"cancelled\" = 0 THEN 0\n",
        "        ELSE 1\n",
        "    END) / COUNT(\"flight_id\")) * 100, 1) AS \"punctuality_rate_percent\",\n",
        "    ROUND((SUM(CASE\n",
        "        WHEN \"cancelled\" = 1 THEN 1\n",
        "        ELSE 0\n",
        "    END) / COUNT(\"flight_id\")) * 100, 1) AS \"cancellation_rate_percent\",\n",
        "    SUM(\"cancelled\") AS \"cancellations\",\n",
        "    (SELECT \"destination_airport\"\n",
        "     FROM \"vw_OneBigTable\" sub\n",
        "     WHERE sub.\"airline\" = vw_OneBigTable.\"airline\"\n",
        "     GROUP BY \"destination_airport\"\n",
        "     ORDER BY COUNT(*) DESC\n",
        "     LIMIT 1) AS \"most_frequent_destination\",\n",
        "    (SELECT \"origin_airport\"\n",
        "     FROM vw_OneBigTable sub\n",
        "     WHERE sub.\"airline\" = vw_OneBigTable.\"airline\"\n",
        "     GROUP BY \"origin_airport\"\n",
        "     ORDER BY COUNT(*) DESC\n",
        "     LIMIT 1) AS \"most_frequent_origin\",\n",
        "     ROUND((AVG(\"elapsed_time\")- AVG(\"scheduled_time\")),1) AS \"buffer_flight\"\n",
        "FROM vw_OneBigTable\n",
        "GROUP BY \"airline\", \"iata_airline\"\n",
        "ORDER BY \"average_arrival_delay\";\n",
        "\"\"\")\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der angelegten Relation in ein pandas DataFrame\n",
        "airlines_df = conn.execute(\"SELECT * FROM vw_airlines_metrics;\").df()\n",
        "\n",
        "# Testabfrage\n",
        "airlines_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nu6AGZcK3yf2"
      },
      "source": [
        "**Analysen im Kontext \"flights\"**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yx5V5r_D3yf2",
        "outputId": "d72d66e6-ef04-40aa-a8eb-4c69edc7ace3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238,
          "referenced_widgets": [
            "8c826bd24d2948a899288344234d6624",
            "3e677425dc44424c8e84a362589dd855",
            "53cad7324bd54f1f97553ca081b50d47"
          ]
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8c826bd24d2948a899288344234d6624"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  tail_number                 airline origin_airport  total_flights  total_km  \\\n",
              "0      N480HA  Hawaiian Airlines Inc.            HNL           1561  346230.0   \n",
              "1      N488HA  Hawaiian Airlines Inc.            HNL           1531  345707.0   \n",
              "2      N484HA  Hawaiian Airlines Inc.            HNL           1498  338634.0   \n",
              "3      N493HA  Hawaiian Airlines Inc.            HNL           1481  324890.0   \n",
              "4      N478HA  Hawaiian Airlines Inc.            HNL           1464  324021.0   \n",
              "\n",
              "   average_speed_km  \n",
              "0             509.7  \n",
              "1             511.4  \n",
              "2             515.8  \n",
              "3             509.2  \n",
              "4             509.5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-74bcde22-706b-4799-af75-e9537668eb35\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tail_number</th>\n",
              "      <th>airline</th>\n",
              "      <th>origin_airport</th>\n",
              "      <th>total_flights</th>\n",
              "      <th>total_km</th>\n",
              "      <th>average_speed_km</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>N480HA</td>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "      <td>HNL</td>\n",
              "      <td>1561</td>\n",
              "      <td>346230.0</td>\n",
              "      <td>509.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>N488HA</td>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "      <td>HNL</td>\n",
              "      <td>1531</td>\n",
              "      <td>345707.0</td>\n",
              "      <td>511.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>N484HA</td>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "      <td>HNL</td>\n",
              "      <td>1498</td>\n",
              "      <td>338634.0</td>\n",
              "      <td>515.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>N493HA</td>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "      <td>HNL</td>\n",
              "      <td>1481</td>\n",
              "      <td>324890.0</td>\n",
              "      <td>509.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>N478HA</td>\n",
              "      <td>Hawaiian Airlines Inc.</td>\n",
              "      <td>HNL</td>\n",
              "      <td>1464</td>\n",
              "      <td>324021.0</td>\n",
              "      <td>509.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74bcde22-706b-4799-af75-e9537668eb35')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74bcde22-706b-4799-af75-e9537668eb35 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74bcde22-706b-4799-af75-e9537668eb35');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e9157c5b-7dbf-48a0-8bc6-2c68fa503b74\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9157c5b-7dbf-48a0-8bc6-2c68fa503b74')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e9157c5b-7dbf-48a0-8bc6-2c68fa503b74 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "flight_metrics_df"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "conn.execute(\"\"\"\n",
        "CREATE VIEW IF NOT EXISTS vw_flight_metrics AS\n",
        "SELECT\n",
        "   \"tail_number\",\n",
        "   \"airline\",\n",
        "   \"origin_airport\",\n",
        "   COUNT(\"flight_id\") AS \"total_flights\",\n",
        "   ROUND(SUM(\"distance_km\"),0) AS \"total_km\",\n",
        "   ROUND((AVG(\"distance_km\") / AVG(\"air_time\" / 60.0)),1) AS \"average_speed_km\"\n",
        "FROM vw_ABT\n",
        "GROUP BY \"origin_airport\", \"tail_number\", \"airline\"\n",
        "ORDER BY \"total_flights\" DESC, \"total_km\" DESC;\n",
        "\"\"\")\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der angelegten Relation in ein pandas DataFrame\n",
        "flight_metrics_df = conn.execute(\"SELECT * FROM vw_flight_metrics;\").df()\n",
        "\n",
        "# Testabfrage\n",
        "flight_metrics_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DgVQu8go3yf2"
      },
      "source": [
        "**Analysen im Kontext \"flight routes\"**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MrlnF1-93yf2",
        "outputId": "57b3895b-0163-4bd3-9d9d-4181577824c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  origin_airport destination_airport        origin_city   destination_city  \\\n",
              "0            DFW                 CMH  Dallas-Fort Worth           Columbus   \n",
              "1            LAX                 DFW        Los Angeles  Dallas-Fort Worth   \n",
              "2            ORD                 SFO            Chicago      San Francisco   \n",
              "3            BNA                 LAX          Nashville        Los Angeles   \n",
              "4            MCO                 DTW            Orlando            Detroit   \n",
              "\n",
              "   origin_airport_lon  origin_airport_lat  destination_airport_lon  \\\n",
              "0           -97.03720            32.89595                -82.89188   \n",
              "1          -118.40807            33.94254                -97.03720   \n",
              "2           -87.90446            41.97960               -122.37484   \n",
              "3           -86.67818            36.12448               -118.40807   \n",
              "4           -81.31603            28.42889                -83.34884   \n",
              "\n",
              "   destination_airport_lat  count(flight_id)  round(sum(distance_km), 0)  \\\n",
              "0                 39.99799              1480                   2205568.0   \n",
              "1                 32.89595              6557                  13032266.0   \n",
              "2                 37.61900              7276                  21615844.0   \n",
              "3                 33.94254              1623                   4693690.0   \n",
              "4                 42.21206              2624                   4041323.0   \n",
              "\n",
              "   avg_distance_km  \n",
              "0           1490.0  \n",
              "1           1988.0  \n",
              "2           2971.0  \n",
              "3           2892.0  \n",
              "4           1540.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26856d99-f6c3-4e4c-9d28-553ecae522b4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>origin_airport</th>\n",
              "      <th>destination_airport</th>\n",
              "      <th>origin_city</th>\n",
              "      <th>destination_city</th>\n",
              "      <th>origin_airport_lon</th>\n",
              "      <th>origin_airport_lat</th>\n",
              "      <th>destination_airport_lon</th>\n",
              "      <th>destination_airport_lat</th>\n",
              "      <th>count(flight_id)</th>\n",
              "      <th>round(sum(distance_km), 0)</th>\n",
              "      <th>avg_distance_km</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>DFW</td>\n",
              "      <td>CMH</td>\n",
              "      <td>Dallas-Fort Worth</td>\n",
              "      <td>Columbus</td>\n",
              "      <td>-97.03720</td>\n",
              "      <td>32.89595</td>\n",
              "      <td>-82.89188</td>\n",
              "      <td>39.99799</td>\n",
              "      <td>1480</td>\n",
              "      <td>2205568.0</td>\n",
              "      <td>1490.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LAX</td>\n",
              "      <td>DFW</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>Dallas-Fort Worth</td>\n",
              "      <td>-118.40807</td>\n",
              "      <td>33.94254</td>\n",
              "      <td>-97.03720</td>\n",
              "      <td>32.89595</td>\n",
              "      <td>6557</td>\n",
              "      <td>13032266.0</td>\n",
              "      <td>1988.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ORD</td>\n",
              "      <td>SFO</td>\n",
              "      <td>Chicago</td>\n",
              "      <td>San Francisco</td>\n",
              "      <td>-87.90446</td>\n",
              "      <td>41.97960</td>\n",
              "      <td>-122.37484</td>\n",
              "      <td>37.61900</td>\n",
              "      <td>7276</td>\n",
              "      <td>21615844.0</td>\n",
              "      <td>2971.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>BNA</td>\n",
              "      <td>LAX</td>\n",
              "      <td>Nashville</td>\n",
              "      <td>Los Angeles</td>\n",
              "      <td>-86.67818</td>\n",
              "      <td>36.12448</td>\n",
              "      <td>-118.40807</td>\n",
              "      <td>33.94254</td>\n",
              "      <td>1623</td>\n",
              "      <td>4693690.0</td>\n",
              "      <td>2892.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>MCO</td>\n",
              "      <td>DTW</td>\n",
              "      <td>Orlando</td>\n",
              "      <td>Detroit</td>\n",
              "      <td>-81.31603</td>\n",
              "      <td>28.42889</td>\n",
              "      <td>-83.34884</td>\n",
              "      <td>42.21206</td>\n",
              "      <td>2624</td>\n",
              "      <td>4041323.0</td>\n",
              "      <td>1540.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26856d99-f6c3-4e4c-9d28-553ecae522b4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-26856d99-f6c3-4e4c-9d28-553ecae522b4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-26856d99-f6c3-4e4c-9d28-553ecae522b4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-67f33316-1cdf-460a-af8f-fdec2ef817a1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67f33316-1cdf-460a-af8f-fdec2ef817a1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-67f33316-1cdf-460a-af8f-fdec2ef817a1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "flight_routes_df",
              "summary": "{\n  \"name\": \"flight_routes_df\",\n  \"rows\": 8603,\n  \"fields\": [\n    {\n      \"column\": \"origin_airport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 628,\n        \"samples\": [\n          \"WYS\",\n          \"11274\",\n          \"ABI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"destination_airport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 629,\n        \"samples\": [\n          \"15497\",\n          \"PPG\",\n          \"CDC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"origin_city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 308,\n        \"samples\": [\n          \"Waterloo\",\n          \"Wichita\",\n          \"Portland\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"destination_city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 308,\n        \"samples\": [\n          \"Moab\",\n          \"San Jose\",\n          \"Santa Ana\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"origin_airport_lon\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.302826219941004,\n        \"min\": -176.64603,\n        \"max\": -64.79856,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          -73.70757,\n          -81.46631,\n          -78.78747\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"origin_airport_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.612589575085195,\n        \"min\": 13.48345,\n        \"max\": 71.28545,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          41.06696,\n          31.25903,\n          35.87764\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"destination_airport_lon\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.30602461983915,\n        \"min\": -176.64603,\n        \"max\": -64.79856,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          -118.15161,\n          -113.59306,\n          -80.29056\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"destination_airport_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.6097482846824755,\n        \"min\": 13.48345,\n        \"max\": 71.28545,\n        \"num_unique_values\": 319,\n        \"samples\": [\n          33.81772,\n          37.09058,\n          25.79325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count(flight_id)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1116,\n        \"min\": 1,\n        \"max\": 13406,\n        \"num_unique_values\": 2189,\n        \"samples\": [\n          3198,\n          2460,\n          1173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"round(sum(distance_km), 0)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1939684.7646474636,\n        \"min\": 79.0,\n        \"max\": 47299508.0,\n        \"num_unique_values\": 6880,\n        \"samples\": [\n          448069.0,\n          242231.0,\n          23850.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_distance_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1082.6755963680678,\n        \"min\": 50.0,\n        \"max\": 8019.0,\n        \"num_unique_values\": 1366,\n        \"samples\": [\n          3887.0,\n          1041.0,\n          315.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "conn.execute(\"\"\"\n",
        "CREATE VIEW IF NOT EXISTS vw_flight_routes AS\n",
        "SELECT \"origin_airport\", \"destination_airport\", \"origin_city\", \"destination_city\", \"origin_airport_lon\", \"origin_airport_lat\", \"destination_airport_lon\", \"destination_airport_lat\", COUNT(\"flight_id\"), ROUND(SUM(\"distance_km\"),0), ROUND(AVG(\"distance_km\"),0) AS avg_distance_km\n",
        "FROM vw_ABT\n",
        "GROUP BY \"origin_airport\", \"destination_airport\", \"origin_city\", \"destination_city\", \"origin_airport_lon\", \"origin_airport_lat\", \"destination_airport_lon\", \"destination_airport_lat\";\n",
        "\"\"\")\n",
        "\n",
        "flight_routes_df = conn.execute(\"SELECT * FROM vw_flight_routes;\").df()\n",
        "\n",
        "# Testabfrage\n",
        "flight_routes_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TK1insOl3yf2"
      },
      "source": [
        "**Analysen im Kontext \"cancellations\"**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X3fsghwK3yf2",
        "outputId": "78490706-e009-43fe-e617-458708eb88ca",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       airline  cancellation_reason month_name origin_airport  \\\n",
              "0        Skywest Airlines Inc.              Weather   Jan 2015            SPI   \n",
              "1  Atlantic Southeast Airlines  National Air System   Jan 2015            ATW   \n",
              "2        Skywest Airlines Inc.              Weather   Jan 2015            PIA   \n",
              "3        United Air Lines Inc.     Airline/ Carrier   Jan 2015            ORD   \n",
              "4       Southwest Airlines Co.     Airline/ Carrier   Jan 2015            BHM   \n",
              "\n",
              "   origin_city  total_flights  cancellation_rate_percent  \n",
              "0  Springfield              2                      100.0  \n",
              "1     Appleton              3                      100.0  \n",
              "2       Peoria              1                      100.0  \n",
              "3      Chicago             24                      100.0  \n",
              "4   Birmingham              1                      100.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe4f89bf-ffac-49d0-9446-065c9b33267e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>airline</th>\n",
              "      <th>cancellation_reason</th>\n",
              "      <th>month_name</th>\n",
              "      <th>origin_airport</th>\n",
              "      <th>origin_city</th>\n",
              "      <th>total_flights</th>\n",
              "      <th>cancellation_rate_percent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Skywest Airlines Inc.</td>\n",
              "      <td>Weather</td>\n",
              "      <td>Jan 2015</td>\n",
              "      <td>SPI</td>\n",
              "      <td>Springfield</td>\n",
              "      <td>2</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Atlantic Southeast Airlines</td>\n",
              "      <td>National Air System</td>\n",
              "      <td>Jan 2015</td>\n",
              "      <td>ATW</td>\n",
              "      <td>Appleton</td>\n",
              "      <td>3</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Skywest Airlines Inc.</td>\n",
              "      <td>Weather</td>\n",
              "      <td>Jan 2015</td>\n",
              "      <td>PIA</td>\n",
              "      <td>Peoria</td>\n",
              "      <td>1</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>United Air Lines Inc.</td>\n",
              "      <td>Airline/ Carrier</td>\n",
              "      <td>Jan 2015</td>\n",
              "      <td>ORD</td>\n",
              "      <td>Chicago</td>\n",
              "      <td>24</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>Airline/ Carrier</td>\n",
              "      <td>Jan 2015</td>\n",
              "      <td>BHM</td>\n",
              "      <td>Birmingham</td>\n",
              "      <td>1</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe4f89bf-ffac-49d0-9446-065c9b33267e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fe4f89bf-ffac-49d0-9446-065c9b33267e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fe4f89bf-ffac-49d0-9446-065c9b33267e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e90ef178-ced2-4e49-8f16-e3eb0f0418da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e90ef178-ced2-4e49-8f16-e3eb0f0418da')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e90ef178-ced2-4e49-8f16-e3eb0f0418da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cancellations_df",
              "summary": "{\n  \"name\": \"cancellations_df\",\n  \"rows\": 28501,\n  \"fields\": [\n    {\n      \"column\": \"airline\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"JetBlue Airways\",\n          \"Virgin America\",\n          \"Skywest Airlines Inc.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cancellation_reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"National Air System\",\n          \"Security\",\n          \"Weather\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_name\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"Nov 2015\",\n          \"Oct 2015\",\n          \"Jan 2015\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"origin_airport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 628,\n        \"samples\": [\n          \"14633\",\n          \"13486\",\n          \"11953\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"origin_city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 308,\n        \"samples\": [\n          \"Bethel\",\n          \"Denver\",\n          \"La Crosse\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_flights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 787,\n        \"min\": 1,\n        \"max\": 21624,\n        \"num_unique_values\": 1871,\n        \"samples\": [\n          5371,\n          3865,\n          1226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cancellation_rate_percent\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "conn.execute(\"\"\"\n",
        "CREATE VIEW IF NOT EXISTS vw_cancellations AS\n",
        "SELECT\n",
        "    \"airline\",\n",
        "    \"cancellation_reason\",\n",
        "    \"month_name\",\n",
        "    \"origin_airport\",\n",
        "    \"origin_city\",\n",
        "    COUNT(*) AS total_flights,\n",
        "    ROUND((SUM(\n",
        "        CASE\n",
        "        WHEN \"cancelled\" = 1 THEN 1\n",
        "        ELSE 0\n",
        "        END)::FLOAT / COUNT(*)) * 100, 1) AS \"cancellation_rate_percent\"\n",
        "FROM vw_OneBigTable\n",
        "GROUP BY \"airline\", \"cancellation_reason\", \"month_name\", \"origin_airport\", \"origin_city\"\n",
        "ORDER BY \"cancellation_rate_percent\" DESC;\n",
        "\"\"\")\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der angelegten Relation in ein pandas DataFrame\n",
        "cancellations_df = conn.execute(\"SELECT * FROM vw_cancellations;\").df()\n",
        "\n",
        "# Testabfrage\n",
        "cancellations_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Td3zeVF-3yf2"
      },
      "source": [
        "**Analysen im Kontext \"time\"**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8MYoeDMF3yf3",
        "outputId": "3125a9fe-ffed-4826-c8c3-fec8e6332ac4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   year quarter_name month_name weekday_name                       airline  \\\n",
              "0  2015      Q2 2015   Apr 2015          Wed  American Eagle Airlines Inc.   \n",
              "1  2015      Q2 2015   Apr 2015          Wed        American Airlines Inc.   \n",
              "2  2015      Q2 2015   Apr 2015          Thu         United Air Lines Inc.   \n",
              "3  2015      Q2 2015   Apr 2015          Thu        Southwest Airlines Co.   \n",
              "4  2015      Q2 2015   Apr 2015          Thu         United Air Lines Inc.   \n",
              "\n",
              "   total_flights  avg_departure_delay  avg_arrival_delay  cancelled  \\\n",
              "0             33                 22.3                NaN          1   \n",
              "1             19                 26.3                NaN          1   \n",
              "2           7254                 18.5               12.3          0   \n",
              "3             51                 69.7                NaN          1   \n",
              "4             50                212.8                NaN          1   \n",
              "\n",
              "  cancellation_reason  \n",
              "0    Airline/ Carrier  \n",
              "1    Airline/ Carrier  \n",
              "2                None  \n",
              "3    Airline/ Carrier  \n",
              "4    Airline/ Carrier  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-98839026-bcc5-4c7f-a964-f14bc47f631b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>quarter_name</th>\n",
              "      <th>month_name</th>\n",
              "      <th>weekday_name</th>\n",
              "      <th>airline</th>\n",
              "      <th>total_flights</th>\n",
              "      <th>avg_departure_delay</th>\n",
              "      <th>avg_arrival_delay</th>\n",
              "      <th>cancelled</th>\n",
              "      <th>cancellation_reason</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2015</td>\n",
              "      <td>Q2 2015</td>\n",
              "      <td>Apr 2015</td>\n",
              "      <td>Wed</td>\n",
              "      <td>American Eagle Airlines Inc.</td>\n",
              "      <td>33</td>\n",
              "      <td>22.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>Airline/ Carrier</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015</td>\n",
              "      <td>Q2 2015</td>\n",
              "      <td>Apr 2015</td>\n",
              "      <td>Wed</td>\n",
              "      <td>American Airlines Inc.</td>\n",
              "      <td>19</td>\n",
              "      <td>26.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>Airline/ Carrier</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015</td>\n",
              "      <td>Q2 2015</td>\n",
              "      <td>Apr 2015</td>\n",
              "      <td>Thu</td>\n",
              "      <td>United Air Lines Inc.</td>\n",
              "      <td>7254</td>\n",
              "      <td>18.5</td>\n",
              "      <td>12.3</td>\n",
              "      <td>0</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2015</td>\n",
              "      <td>Q2 2015</td>\n",
              "      <td>Apr 2015</td>\n",
              "      <td>Thu</td>\n",
              "      <td>Southwest Airlines Co.</td>\n",
              "      <td>51</td>\n",
              "      <td>69.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>Airline/ Carrier</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2015</td>\n",
              "      <td>Q2 2015</td>\n",
              "      <td>Apr 2015</td>\n",
              "      <td>Thu</td>\n",
              "      <td>United Air Lines Inc.</td>\n",
              "      <td>50</td>\n",
              "      <td>212.8</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>Airline/ Carrier</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-98839026-bcc5-4c7f-a964-f14bc47f631b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-98839026-bcc5-4c7f-a964-f14bc47f631b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-98839026-bcc5-4c7f-a964-f14bc47f631b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cf4dc901-8f55-47b8-834e-979b64133fa1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf4dc901-8f55-47b8-834e-979b64133fa1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cf4dc901-8f55-47b8-834e-979b64133fa1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "time_df",
              "summary": "{\n  \"name\": \"time_df\",\n  \"rows\": 975,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"quarter_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Q3 2015\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_name\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"Oct 2015\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Wed\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"airline\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Spirit Air Lines\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total_flights\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2535,\n        \"min\": 1,\n        \"max\": 18833,\n        \"num_unique_values\": 402,\n        \"samples\": [\n          139\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_departure_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 85.75457278587656,\n        \"min\": 15.0,\n        \"max\": 1157.0,\n        \"num_unique_values\": 518,\n        \"samples\": [\n          19.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_arrival_delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.502693015961073,\n        \"min\": 5.7,\n        \"max\": 40.6,\n        \"num_unique_values\": 134,\n        \"samples\": [\n          14.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cancelled\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cancellation_reason\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Weather\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "conn.execute(\"\"\"\n",
        "CREATE VIEW IF NOT EXISTS vw_time_analysis AS\n",
        "SELECT\n",
        "    \"year\",\n",
        "    \"quarter_name\",\n",
        "    \"month_name\",\n",
        "    \"weekday_name\",\n",
        "    \"airline\",\n",
        "    COUNT(*) AS total_flights,\n",
        "    ROUND(AVG(\"departure_delay\"), 1) AS avg_departure_delay,\n",
        "    ROUND(AVG(\"arrival_delay\"), 1) AS avg_arrival_delay,\n",
        "    \"cancelled\",\n",
        "    \"cancellation_reason\"\n",
        "FROM vw_OneBigTable\n",
        "GROUP BY\n",
        "    \"year\",\n",
        "    \"quarter_name\",\n",
        "    \"month_name\",\n",
        "    \"weekday_name\",\n",
        "    \"airline\",\n",
        "    \"cancelled\",\n",
        "    \"cancellation_reason\"\n",
        "HAVING AVG(\"departure_delay\") > 15\n",
        "ORDER BY \"month_name\";\n",
        "\"\"\")\n",
        "\n",
        "# ÃœberfÃ¼hrt die Daten aus der angelegten Relation in ein pandas DataFrame\n",
        "time_df = conn.execute(\"SELECT * FROM vw_time_analysis;\").df()\n",
        "\n",
        "# Testabfrage\n",
        "time_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "boQhlAci3yf3"
      },
      "source": [
        "### **Beenden der Verbindung zur Datenbank**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EDXUwtRE3yf3"
      },
      "outputs": [],
      "source": [
        "# Beendet die Verbindung zur im Arbeitsspeicher liegenden in-Memory-DB. Dabei gehen auch alle Daten im Arbeitsspeicher verloren\n",
        "conn.close()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "base",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "d35e7ca264d248e09d08a7c52f1414da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_03ac2e0149564f83bde239a4ae730807",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fd95791c9a6941db8b477a9c707d2909",
            "value": 100
          }
        },
        "03ac2e0149564f83bde239a4ae730807": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "fd95791c9a6941db8b477a9c707d2909": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": "black",
            "description_width": ""
          }
        },
        "8c99e4461f1749f6b8200a76ab8e3fb7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9678eba244da484d940d981ad116d1ed",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_39f43a93711948c282e36ff1cd3099bf",
            "value": 100
          }
        },
        "9678eba244da484d940d981ad116d1ed": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "39f43a93711948c282e36ff1cd3099bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": "black",
            "description_width": ""
          }
        },
        "573d4fd262df46b286e9e5b7419ae2e5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_899ecc2e41bb493a96b2642f191c2f35",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a9803f936db9407ebfac1eca4827c90a",
            "value": 100
          }
        },
        "899ecc2e41bb493a96b2642f191c2f35": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "a9803f936db9407ebfac1eca4827c90a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": "black",
            "description_width": ""
          }
        },
        "1666637be781416083a229b451726328": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5f739bfcf3a54ad3812328c82904f344",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c8ead106458144c7ab38a919105e58bb",
            "value": 100
          }
        },
        "5f739bfcf3a54ad3812328c82904f344": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "c8ead106458144c7ab38a919105e58bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": "black",
            "description_width": ""
          }
        },
        "a7b5b16af5ac4abd9302aa8ba44a2fcd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ad2d23973f3240e0aea84598270d5723",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_fbda111083e94f95b5b03f535d5f8afb",
            "value": 100
          }
        },
        "ad2d23973f3240e0aea84598270d5723": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "fbda111083e94f95b5b03f535d5f8afb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": "black",
            "description_width": ""
          }
        },
        "cf9116484cf14f29ae0ad5a242d3a3c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3341ec0d70264a7689dfbda931341a43",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_47f1a612861e47a9897ccf1ceb10acbc",
            "value": 100
          }
        },
        "3341ec0d70264a7689dfbda931341a43": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "47f1a612861e47a9897ccf1ceb10acbc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": "black",
            "description_width": ""
          }
        },
        "8c826bd24d2948a899288344234d6624": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3e677425dc44424c8e84a362589dd855",
            "max": 100,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_53cad7324bd54f1f97553ca081b50d47",
            "value": 100
          }
        },
        "3e677425dc44424c8e84a362589dd855": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "auto"
          }
        },
        "53cad7324bd54f1f97553ca081b50d47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": "black",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
